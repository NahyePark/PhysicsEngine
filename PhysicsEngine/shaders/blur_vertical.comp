#version 430

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in; // Declares thread group size
layout (rgba32f) uniform readonly image2D src; // src image as 4 channel 32bit float readonly
layout (rgba32f) uniform writeonly image2D dst; // dst image as 4 channel 32bit float writeonly
shared vec4 v[128+11]; // Variable shared with other threads in the 128x1 thread group

void main() {

	int w = 5;
	float weights[11];
    float s = 5.0f/3.f;
	float sum = 0;
	for(int j = 0; j < 11; ++j)
	{
		weights[j] = exp(-pow(j,2)/(s*s));
		sum += weights[j];
	}
	for(int j = 0; j < 11; ++j)
	{
		weights[j] /= sum;
	}

	ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID
	uint i = gl_LocalInvocationID.x; // Local thread id in the 128x1 thread groups128x1
	v[i] = imageLoad(src, gpos - ivec2(w,0)); // read an image pixel at an ivec2(.,.) position
	if (i<2*w) 
		v[i+128] = imageLoad(src, gpos+ivec2(128-w,0)); // read extra 2*w pixels
	barrier(); // Wait for all threads to catchup before reading v[]

	vec4 result = vec4(0);
	for(int j = 0; j < 2*5 + 1; ++j)
	{
		result += weights[j]*v[i+j];
	}

	imageStore(dst, gpos, result); // Write to destination image

}